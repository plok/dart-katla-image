// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class ImageBinding {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ImageBinding(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ImageBinding.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Void> create_image(
    Size_32s size,
    int channels,
    int depth,
  ) {
    return _create_image(
      size,
      channels,
      depth,
    );
  }

  late final _create_image_ptr =
      _lookup<ffi.NativeFunction<_c_create_image>>('create_image');
  late final _dart_create_image _create_image =
      _create_image_ptr.asFunction<_dart_create_image>();

  ffi.Pointer<ffi.Void> create_image_with_step(
    Size_32s size,
    int channels,
    int step,
    int depth,
  ) {
    return _create_image_with_step(
      size,
      channels,
      step,
      depth,
    );
  }

  late final _create_image_with_step_ptr =
      _lookup<ffi.NativeFunction<_c_create_image_with_step>>(
          'create_image_with_step');
  late final _dart_create_image_with_step _create_image_with_step =
      _create_image_with_step_ptr.asFunction<_dart_create_image_with_step>();

  ffi.Pointer<ffi.Void> create_image_from_existing_pixels(
    ffi.Pointer<ffi.Uint8> pixels,
    Size_32s size,
    int channels,
    int step,
    int depth,
  ) {
    return _create_image_from_existing_pixels(
      pixels,
      size,
      channels,
      step,
      depth,
    );
  }

  late final _create_image_from_existing_pixels_ptr =
      _lookup<ffi.NativeFunction<_c_create_image_from_existing_pixels>>(
          'create_image_from_existing_pixels');
  late final _dart_create_image_from_existing_pixels
      _create_image_from_existing_pixels =
      _create_image_from_existing_pixels_ptr
          .asFunction<_dart_create_image_from_existing_pixels>();

  ffi.Pointer<ffi.Void> create_image_from_existing_roi(
    ffi.Pointer<ffi.Void> image,
    Rect_32s roi,
  ) {
    return _create_image_from_existing_roi(
      image,
      roi,
    );
  }

  late final _create_image_from_existing_roi_ptr =
      _lookup<ffi.NativeFunction<_c_create_image_from_existing_roi>>(
          'create_image_from_existing_roi');
  late final _dart_create_image_from_existing_roi
      _create_image_from_existing_roi = _create_image_from_existing_roi_ptr
          .asFunction<_dart_create_image_from_existing_roi>();

  void destroy_image(
    ffi.Pointer<ffi.Void> image,
  ) {
    return _destroy_image(
      image,
    );
  }

  late final _destroy_image_ptr =
      _lookup<ffi.NativeFunction<_c_destroy_image>>('destroy_image');
  late final _dart_destroy_image _destroy_image =
      _destroy_image_ptr.asFunction<_dart_destroy_image>();

  ffi.Pointer<ffi.Void> read_image(
    ffi.Pointer<ffi.Int8> imagePath,
  ) {
    return _read_image(
      imagePath,
    );
  }

  late final _read_image_ptr =
      _lookup<ffi.NativeFunction<_c_read_image>>('read_image');
  late final _dart_read_image _read_image =
      _read_image_ptr.asFunction<_dart_read_image>();

  void write_image_sync(
    ffi.Pointer<ffi.Int8> imagePath,
    ffi.Pointer<ffi.Void> image,
  ) {
    return _write_image_sync(
      imagePath,
      image,
    );
  }

  late final _write_image_sync_ptr =
      _lookup<ffi.NativeFunction<_c_write_image_sync>>('write_image_sync');
  late final _dart_write_image_sync _write_image_sync =
      _write_image_sync_ptr.asFunction<_dart_write_image_sync>();

  Size_32s image_size(
    ffi.Pointer<ffi.Void> image,
  ) {
    return _image_size(
      image,
    );
  }

  late final _image_size_ptr =
      _lookup<ffi.NativeFunction<_c_image_size>>('image_size');
  late final _dart_image_size _image_size =
      _image_size_ptr.asFunction<_dart_image_size>();

  int image_line_stride(
    ffi.Pointer<ffi.Void> image,
  ) {
    return _image_line_stride(
      image,
    );
  }

  late final _image_line_stride_ptr =
      _lookup<ffi.NativeFunction<_c_image_line_stride>>('image_line_stride');
  late final _dart_image_line_stride _image_line_stride =
      _image_line_stride_ptr.asFunction<_dart_image_line_stride>();

  int image_channels(
    ffi.Pointer<ffi.Void> image,
  ) {
    return _image_channels(
      image,
    );
  }

  late final _image_channels_ptr =
      _lookup<ffi.NativeFunction<_c_image_channels>>('image_channels');
  late final _dart_image_channels _image_channels =
      _image_channels_ptr.asFunction<_dart_image_channels>();

  void split(
    ffi.Pointer<ffi.Void> src,
    ffi.Pointer<ffi.Pointer<ffi.Void>> dest,
  ) {
    return _split(
      src,
      dest,
    );
  }

  late final _split_ptr = _lookup<ffi.NativeFunction<_c_split>>('split');
  late final _dart_split _split = _split_ptr.asFunction<_dart_split>();

  int dart_init_ffi(
    ffi.Pointer<ffi.Void> initializeApiDLData,
  ) {
    return _dart_init_ffi(
      initializeApiDLData,
    );
  }

  late final _dart_init_ffi_ptr =
      _lookup<ffi.NativeFunction<_c_dart_init_ffi>>('dart_init_ffi');
  late final _dart_dart_init_ffi _dart_init_ffi =
      _dart_init_ffi_ptr.asFunction<_dart_dart_init_ffi>();

  void dart_write_image(
    ffi.Pointer<ffi.Int8> imagePath,
    ffi.Pointer<ffi.Void> image,
    int nativePort,
  ) {
    return _dart_write_image(
      imagePath,
      image,
      nativePort,
    );
  }

  late final _dart_write_image_ptr =
      _lookup<ffi.NativeFunction<_c_dart_write_image>>('dart_write_image');
  late final _dart_dart_write_image _dart_write_image =
      _dart_write_image_ptr.asFunction<_dart_dart_write_image>();

  int dart_image_width(
    ffi.Pointer<ffi.Void> image,
  ) {
    return _dart_image_width(
      image,
    );
  }

  late final _dart_image_width_ptr =
      _lookup<ffi.NativeFunction<_c_dart_image_width>>('dart_image_width');
  late final _dart_dart_image_width _dart_image_width =
      _dart_image_width_ptr.asFunction<_dart_dart_image_width>();

  int dart_image_height(
    ffi.Pointer<ffi.Void> image,
  ) {
    return _dart_image_height(
      image,
    );
  }

  late final _dart_image_height_ptr =
      _lookup<ffi.NativeFunction<_c_dart_image_height>>('dart_image_height');
  late final _dart_dart_image_height _dart_image_height =
      _dart_image_height_ptr.asFunction<_dart_dart_image_height>();
}

class __fsid_t extends ffi.Opaque {}

class Size_32s extends ffi.Struct {
  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;
}

class Size_32f extends ffi.Struct {
  @ffi.Float()
  external double width;

  @ffi.Float()
  external double height;
}

class Point_32s extends ffi.Struct {
  @ffi.Int32()
  external int x;

  @ffi.Int32()
  external int y;
}

class Point_32f extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;
}

class Rect_32s extends ffi.Struct {
  @ffi.Int32()
  external int left;

  @ffi.Int32()
  external int top;

  @ffi.Int32()
  external int right;

  @ffi.Int32()
  external int bottom;
}

class Rect_32f extends ffi.Struct {
  @ffi.Float()
  external double left;

  @ffi.Float()
  external double top;

  @ffi.Float()
  external double right;

  @ffi.Float()
  external double bottom;
}

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 32;

const int _SYS_CDEFS_H = 1;

const int __glibc_c99_flexarr_available = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int __TIMESIZE = 64;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

typedef _c_create_image = ffi.Pointer<ffi.Void> Function(
  Size_32s size,
  ffi.Int32 channels,
  ffi.Int32 depth,
);

typedef _dart_create_image = ffi.Pointer<ffi.Void> Function(
  Size_32s size,
  int channels,
  int depth,
);

typedef _c_create_image_with_step = ffi.Pointer<ffi.Void> Function(
  Size_32s size,
  ffi.Int32 channels,
  ffi.Int32 step,
  ffi.Int32 depth,
);

typedef _dart_create_image_with_step = ffi.Pointer<ffi.Void> Function(
  Size_32s size,
  int channels,
  int step,
  int depth,
);

typedef _c_create_image_from_existing_pixels = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint8> pixels,
  Size_32s size,
  ffi.Int32 channels,
  ffi.Int32 step,
  ffi.Int32 depth,
);

typedef _dart_create_image_from_existing_pixels = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<ffi.Uint8> pixels,
  Size_32s size,
  int channels,
  int step,
  int depth,
);

typedef _c_create_image_from_existing_roi = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> image,
  Rect_32s roi,
);

typedef _dart_create_image_from_existing_roi = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> image,
  Rect_32s roi,
);

typedef _c_destroy_image = ffi.Void Function(
  ffi.Pointer<ffi.Void> image,
);

typedef _dart_destroy_image = void Function(
  ffi.Pointer<ffi.Void> image,
);

typedef _c_read_image = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> imagePath,
);

typedef _dart_read_image = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> imagePath,
);

typedef _c_write_image_sync = ffi.Void Function(
  ffi.Pointer<ffi.Int8> imagePath,
  ffi.Pointer<ffi.Void> image,
);

typedef _dart_write_image_sync = void Function(
  ffi.Pointer<ffi.Int8> imagePath,
  ffi.Pointer<ffi.Void> image,
);

typedef _c_image_size = Size_32s Function(
  ffi.Pointer<ffi.Void> image,
);

typedef _dart_image_size = Size_32s Function(
  ffi.Pointer<ffi.Void> image,
);

typedef _c_image_line_stride = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> image,
);

typedef _dart_image_line_stride = int Function(
  ffi.Pointer<ffi.Void> image,
);

typedef _c_image_channels = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> image,
);

typedef _dart_image_channels = int Function(
  ffi.Pointer<ffi.Void> image,
);

typedef _c_split = ffi.Void Function(
  ffi.Pointer<ffi.Void> src,
  ffi.Pointer<ffi.Pointer<ffi.Void>> dest,
);

typedef _dart_split = void Function(
  ffi.Pointer<ffi.Void> src,
  ffi.Pointer<ffi.Pointer<ffi.Void>> dest,
);

typedef _c_dart_init_ffi = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> initializeApiDLData,
);

typedef _dart_dart_init_ffi = int Function(
  ffi.Pointer<ffi.Void> initializeApiDLData,
);

typedef _c_dart_write_image = ffi.Void Function(
  ffi.Pointer<ffi.Int8> imagePath,
  ffi.Pointer<ffi.Void> image,
  ffi.Int64 nativePort,
);

typedef _dart_dart_write_image = void Function(
  ffi.Pointer<ffi.Int8> imagePath,
  ffi.Pointer<ffi.Void> image,
  int nativePort,
);

typedef _c_dart_image_width = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> image,
);

typedef _dart_dart_image_width = int Function(
  ffi.Pointer<ffi.Void> image,
);

typedef _c_dart_image_height = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> image,
);

typedef _dart_dart_image_height = int Function(
  ffi.Pointer<ffi.Void> image,
);
